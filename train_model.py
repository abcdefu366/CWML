import os
import json
import shutil
from pathlib import Path
from tqdm import tqdm

from detectron2.data.datasets import register_coco_instances
from detectron2.data import MetadataCatalog, DatasetCatalog
from detectron2.engine import DefaultTrainer, DefaultPredictor
from detectron2.config import get_cfg
from detectron2 import model_zoo
from detectron2.evaluation import COCOEvaluator, inference_on_dataset
from detectron2.data import build_detection_test_loader
from detectron2.utils.visualizer import Visualizer
import cv2
import matplotlib.pyplot as plt
import random

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Kaggle API (–∫—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ)
def setup_kaggle():
    kaggle_json = Path("kaggle.json")
    if not kaggle_json.exists():
        raise FileNotFoundError("‚ùå –§–∞–π–ª kaggle.json –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–∫–∞—á–∞–π—Ç–µ –µ–≥–æ —Å https://www.kaggle.com/account –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞.")
    
    kaggle_dir = Path.home() / ".kaggle"
    kaggle_dir.mkdir(parents=True, exist_ok=True)
    shutil.copy(str(kaggle_json), str(kaggle_dir / "kaggle.json"))
    os.environ["KAGGLE_CONFIG_DIR"] = str(kaggle_dir)
    print("‚úÖ Kaggle API –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")

# üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
def download_dataset_if_needed():
    if not os.path.exists("malaria-bounding-boxes.zip"):
        print("üì¶ –°–∫–∞—á–∏–≤–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç —Å Kaggle...")
        setup_kaggle()
        os.system("kaggle datasets download -d kmader/malaria-bounding-boxes")
    else:
        print("‚úÖ –ê—Ä—Ö–∏–≤ —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º —É–∂–µ —Å–∫–∞—á–∞–Ω.")

    if not os.path.exists("malaria"):
        print("üìÇ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤...")
        os.system("unzip -qo malaria-bounding-boxes.zip -d malaria")
    else:
        print("‚úÖ –ê—Ä—Ö–∏–≤ —É–∂–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω.")

# üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç COCO
def convert_to_coco(source_path, image_dir, output_path):
    with open(source_path, 'r') as f:
        raw_data = json.load(f)

    coco_images = []
    coco_annotations = []
    coco_categories = {}
    category_id_counter = 1
    annotation_id = 1
    image_id = 1

    for item in tqdm(raw_data, desc="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ COCO"):
        image_info = item["image"]
        file_name = os.path.basename(image_info["pathname"])
        width = image_info["shape"]["c"]
        height = image_info["shape"]["r"]

        coco_images.append({
            "id": image_id,
            "file_name": file_name,
            "width": width,
            "height": height
        })

        for obj in item["objects"]:
            category_name = obj["category"]
            if category_name not in coco_categories:
                coco_categories[category_name] = category_id_counter
                category_id_counter += 1

            cat_id = coco_categories[category_name]
            bbox = obj["bounding_box"]
            xmin = bbox["minimum"]["c"]
            ymin = bbox["minimum"]["r"]
            xmax = bbox["maximum"]["c"]
            ymax = bbox["maximum"]["r"]
            width_box = xmax - xmin
            height_box = ymax - ymin

            coco_annotations.append({
                "id": annotation_id,
                "image_id": image_id,
                "category_id": cat_id,
                "bbox": [xmin, ymin, width_box, height_box],
                "area": width_box * height_box,
                "iscrowd": 0
            })
            annotation_id += 1

        image_id += 1

    coco_format = {
        "images": coco_images,
        "annotations": coco_annotations,
        "categories": [
            {"id": i, "name": name} for name, i in coco_categories.items()
        ]
    }

    with open(output_path, "w") as f:
        json.dump(coco_format, f, indent=4)

    print(f"‚úÖ COCO —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path}")

# üìä –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
def evaluate_model(cfg):
    print("\nüìä –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –Ω–∞–±–æ—Ä–µ...")
    evaluator = COCOEvaluator("malaria_test", cfg, False, output_dir="./output_malaria")
    val_loader = build_detection_test_loader(cfg, "malaria_test")
    model = DefaultPredictor(cfg).model
    results = inference_on_dataset(model, val_loader, evaluator)
    print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏:")
    print(results)

# üñºÔ∏è –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def visualize_random_prediction(cfg):
    print("\nüéØ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
    predictor = DefaultPredictor(cfg)
    val_loader = build_detection_test_loader(cfg, "malaria_test")
    dataset = val_loader.dataset

    sample = random.choice(dataset)
    img_path = sample["file_name"]
    image = cv2.imread(img_path)
    outputs = predictor(image)

    v = Visualizer(image[:, :, ::-1], MetadataCatalog.get("malaria_test"), scale=1.2)
    out = v.draw_instance_predictions(outputs["instances"].to("cpu"))

    plt.figure(figsize=(12, 12))
    plt.imshow(out.get_image())
    plt.axis("off")
    plt.title(os.path.basename(img_path))
    plt.show()

# üñºÔ∏è –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—É—Ç–∏
def visualize_specific_image(cfg, path):
    print(f"üéØ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {path}")
    predictor = DefaultPredictor(cfg)
    image = cv2.imread(path)
    outputs = predictor(image)

    v = Visualizer(image[:, :, ::-1], MetadataCatalog.get("malaria_test"), scale=1.2)
    out = v.draw_instance_predictions(outputs["instances"].to("cpu"))

    plt.figure(figsize=(12, 12))
    plt.imshow(out.get_image())
    plt.axis("off")
    plt.title(os.path.basename(path))
    plt.show()

# üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
def train():
    download_dataset_if_needed()

    base_path = "malaria/malaria"
    image_dir = os.path.join(base_path, "images")
    train_json = os.path.join(base_path, "malaria", "training.json")
    test_json = os.path.join(base_path, "malaria", "test.json")
    train_coco = os.path.join(base_path, "train_coco.json")
    test_coco = os.path.join(base_path, "test_coco.json")

    convert_to_coco(train_json, image_dir, train_coco)
    convert_to_coco(test_json, image_dir, test_coco)

    register_coco_instances("malaria_train", {}, train_coco, image_dir)
    register_coco_instances("malaria_test", {}, test_coco, image_dir)

    metadata = MetadataCatalog.get("malaria_train")
    dataset_dicts = DatasetCatalog.get("malaria_train")
    print(f"üì¶ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(dataset_dicts)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

    cfg = get_cfg()
    cfg.merge_from_file(model_zoo.get_config_file("COCO-Detection/faster_rcnn_R_50_FPN_3x.yaml"))
    cfg.MODEL.DEVICE = "cuda" if os.environ.get("USE_CUDA", "1") == "1" else "cpu"
    cfg.DATASETS.TRAIN = ("malaria_train",)
    cfg.DATASETS.TEST = ("malaria_test",)
    cfg.DATALOADER.NUM_WORKERS = 2
    cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url("COCO-Detection/faster_rcnn_R_50_FPN_3x.yaml")
    cfg.MODEL.ROI_HEADS.NUM_CLASSES = len(metadata.thing_classes)
    cfg.SOLVER.IMS_PER_BATCH = 2
    cfg.SOLVER.BASE_LR = 0.00025
    cfg.SOLVER.MAX_ITER = 5000
    cfg.SOLVER.STEPS = []
    cfg.MODEL.ROI_HEADS.BATCH_SIZE_PER_IMAGE = 128
    cfg.OUTPUT_DIR = "output"
    os.makedirs(cfg.OUTPUT_DIR, exist_ok=True)

    trainer = DefaultTrainer(cfg)
    trainer.resume_or_load(resume=False)
    trainer.train()

    evaluate_model(cfg)
    visualize_random_prediction(cfg)
    # visualize_specific_image(cfg, "malaria/malaria/images/your_image.png")  # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

if __name__ == "__main__":
    train()
